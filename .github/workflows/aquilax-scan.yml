name: AquilaX Security Scan

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  aquilax_scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Dependencies
        run: |
          pip install aquilax==1.1.10
          sudo apt-get update && sudo apt-get install -y jq

      - name: Run AquilaX Scan
        id: start_scan
        env:
          AQUILAX_AUTH: ${{ secrets.AQUILAX_API_TOKEN }}
        run: |
          # Run the scan and capture the output
          scan_output=$(aquilax scan \
            --org-id "6691108b1985981c1f5d5b93" \
            --group-id "66cc51d790da713a3f7c6075" \
            --git-uri "https://github.com/AquilaX-AI/vulnapp-python" \
            --scanners sast_scanner iac_scanner \
            --public true \
            --frequency Once \
            --tags cicd audit)

          echo "Raw Scan Output: $scan_output"

          # Remove any potential whitespace from the scan output
          scan_output=$(echo "$scan_output" | tr -d '\n' | tr -d '\r')

          # Validate if the scan_output is a valid JSON
          if echo "$scan_output" | jq empty; then
            echo "Valid JSON detected."
          else
            echo "Invalid JSON detected in scan output."
            exit 1
          fi

          # Parse scan_id and project_id using jq
          SCAN_ID=$(echo "$scan_output" | jq -r '.scan_id')
          PROJECT_ID=$(echo "$scan_output" | jq -r '.project_id')

          if [[ -z "$SCAN_ID" || -z "$PROJECT_ID" ]]; then
            echo "Failed to extract SCAN_ID or PROJECT_ID"
            echo "Raw scan output: $scan_output"
            exit 1
          fi
          echo "SCAN_ID=$SCAN_ID" >> $GITHUB_ENV
          echo "PROJECT_ID=$PROJECT_ID" >> $GITHUB_ENV
          echo "Scan started with SCAN_ID=$SCAN_ID and PROJECT_ID=$PROJECT_ID"

      - name: Poll for Scan Completion
        env:
          AQUILAX_AUTH: ${{ secrets.AQUILAX_API_TOKEN }}
        run: |
          max_attempts=20
          attempt=0
          while [ $attempt -lt $max_attempts ]; do
            scan_status=$(aquilax get-scan-details \
              --org-id "6691108b1985981c1f5d5b93" \
              --group-id "66cc51d790da713a3f7c6075" \
              --project-id "$PROJECT_ID" \
              --scan-id "$SCAN_ID")

            echo "Raw scan status: $scan_status"
            
            # Parse the status from the scan details using correct jq path
            status=$(echo "$scan_status" | jq -r '.scan.status')

            # Debugging: Print out the parsed status
            echo "Parsed scan status: $status"

            # Add a check to see if status is empty or not set
            if [ -z "$status" ]; then
              echo "Scan status is empty or not set. Attempt $((attempt+1))/$max_attempts."
            elif [ "$status" = "COMPLETED" ]; then
              echo "Scan completed!"
              break
            elif [ "$status" = "FAILED" ]; then
              echo "Scan failed!"
              exit 1
            else
              echo "Scan status: $status. Attempt $((attempt+1))/$max_attempts. Waiting for 30 seconds..."
            fi

            # Wait 30 seconds and retry
            sleep 30
            ((attempt++))
          done
          
          if [ $attempt -eq $max_attempts ]; then
            echo "Scan did not complete within the expected time."
            exit 1
          fi

      - name: Check for Vulnerabilities
        id: check_vulns
        env:
          AQUILAX_AUTH: ${{ secrets.AQUILAX_API_TOKEN }}
        run: |
          scan_status=$(aquilax get-scan-details \
            --org-id "6691108b1985981c1f5d5b93" \
            --group-id "66cc51d790da713a3f7c6075" \
            --project-id "$PROJECT_ID" \
            --scan-id "$SCAN_ID")
          echo "$scan_status" > scan_results.json
          
          # Check for vulnerabilities
          vulns=$(jq -r '.scan.results[] | select(.findings != null) | .findings[]' scan_results.json)
          if [[ -n "$vulns" ]]; then
            echo "Vulnerabilities found!"
            echo "$vulns"
            if [[ "${{ secrets.FAIL_ON_VULNS }}" == "true" ]]; then
              echo "Failing the pipeline due to vulnerabilities..."
              exit 1
            else
              echo "Continuing despite vulnerabilities..."
            fi
          else
            echo "No vulnerabilities found."
          fi

      - name: Upload Scan Results
        uses: actions/upload-artifact@v3
        with:
          name: aquilax-scan-results
          path: scan_results.json
