name: AquilaX Security Scan

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  aquilax_scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install Dependencies
        run: |
          pip install aquilax==1.1.6
          sudo apt-get install jq

      - name: Run AquilaX Scan
        id: start_scan
        env:
          AQUILAX_AUTH: ${{ secrets.AQUILAX_API_TOKEN }}
        run: |
          scan_info=$(aquilax scan --org-id "6691108b1985981c1f5d5b93" --group-id "66cc51d790da713a3f7c6075" --git-uri "https://github.com/AquilaX-AI/vulnapp-python" --scanners "sast_scanner" "iac_scanner" --public True --frequency Once --tags "cicd" "audit")
          echo "Scan Info: $scan_info"
          # Extract SCAN_ID and PROJECT_ID
          SCAN_ID=$(echo "$scan_info" | jq -r '.scan_id')
          PROJECT_ID=$(echo "$scan_info" | jq -r '.project_id')

          if [[ -z "$SCAN_ID" || -z "$PROJECT_ID" ]]; then
            echo "Failed to extract SCAN_ID or PROJECT_ID"
            exit 1
          fi

          echo "SCAN_ID=$SCAN_ID" >> $GITHUB_ENV
          echo "PROJECT_ID=$PROJECT_ID" >> $GITHUB_ENV
          echo "Scan started with SCAN_ID=$SCAN_ID and PROJECT_ID=$PROJECT_ID"

      - name: Poll for Scan Completion
        env:
          AQUILAX_AUTH: ${{ secrets.AQUILAX_API_TOKEN }}
        run: |
          while true; do
            scan_status=$(aquilax get-scan-details --org-id "6691108b1985981c1f5d5b93" --group-id "66cc51d790da713a3f7c6075" --project-id "$PROJECT_ID" --scan-id "$SCAN_ID")
            echo "$scan_status" | jq
            status=$(echo "$scan_status" | jq -r '.scan.status')
            if [ "$status" = "COMPLETED" ]; then
              echo "Scan completed!"
              break
            elif [ "$status" = "FAILED" ]; then
              echo "Scan failed!"
              exit 1
            else
              echo "Scan status: $status. Waiting for 30 seconds..."
              sleep 30
            fi
          done

      - name: Check for Vulnerabilities
        id: check_vulns
        env:
          AQUILAX_AUTH: ${{ secrets.AQUILAX_API_TOKEN }}
        run: |
          scan_status=$(aquilax get-scan-details --org-id "6691108b1985981c1f5d5b93" --group-id "66cc51d790da713a3f7c6075" --project-id "$PROJECT_ID" --scan-id "$SCAN_ID")
          echo "$scan_status" > scan_results.json
          cat scan_results.json
          
          # Check for vulnerabilities
          vulns=$(jq -r '.scan.results[] | select(.findings != null) | .findings[]' scan_results.json)
          if [[ -n "$vulns" ]]; then
            echo "Vulnerabilities found!"
            if [[ "${{ secrets.FAIL_ON_VULNS }}" == "true" ]]; then
              echo "Failing the pipeline due to vulnerabilities..."
              exit 1
            else
              echo "Continuing despite vulnerabilities..."
            fi
          else
            echo "No vulnerabilities found."
          fi

      - name: Upload Scan Results
        uses: actions/upload-artifact@v2
        with:
          name: aquilax-scan-results
          path: scan_results.json
